@inject IJSRuntime JsRuntime

<div class="modal @_modalClass" tabindex="-1" role="dialog" style="display:@_modalDisplay; overflow-y: auto; pointer-events: none;">
    <div class="modal-dialog modal-lg" role="document" style="@_positionStyle; pointer-events: auto;">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="Close">
                </button>
            </div>
            <div class="modal-body">
                @ChildContent
            </div>
        </div>
    </div>
</div>

@code {
    private const string GetElementPositionByIdFunction = "getElementPositionById";

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool ShowFade { get; set; } = false;

    [Parameter]
    public string TargetElement { get; set; } = string.Empty;

    private string _modalDisplay = "none;";
    private string _modalClass = string.Empty;
    private string _positionStyle = string.Empty;

    public async Task Open()
    {
        _modalDisplay = "block";
        _modalClass = "show";
        await UpdatePosition();
    }

    public void Close()
    {
        _modalDisplay = "none";
        _modalClass = string.Empty;
    }

    private async Task UpdatePosition()
    {
        if (!string.IsNullOrEmpty(TargetElement))
        {
            var selector = TargetElement.StartsWith("#") ? TargetElement : $"#{TargetElement}";
            var rect = await JsRuntime.InvokeAsync<BoundingClientRect>(GetElementPositionByIdFunction, selector);
            _positionStyle = $"top: {rect.Bottom}px; left: {rect.Right}px; transform: translate(15%, 125%); position: fixed;";

            StateHasChanged();
        }
    }
}
 